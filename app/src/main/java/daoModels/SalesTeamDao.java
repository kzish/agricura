package daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.centricdata.agricura.Models.SalesTeam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALES_TEAM".
*/
public class SalesTeamDao extends AbstractDao<SalesTeam, Long> {

    public static final String TABLENAME = "SALES_TEAM";

    /**
     * Properties of entity SalesTeam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SalesID = new Property(0, Long.class, "salesID", true, "_id");
        public final static Property SalesPerson = new Property(1, String.class, "salesPerson", false, "SALES_PERSON");
        public final static Property SalesPersonTel = new Property(2, String.class, "salesPersonTel", false, "SALES_PERSON_TEL");
        public final static Property SalesBranch = new Property(3, String.class, "salesBranch", false, "SALES_BRANCH");
        public final static Property SalesContact = new Property(4, String.class, "salesContact", false, "SALES_CONTACT");
        public final static Property SalesEmail = new Property(5, String.class, "salesEmail", false, "SALES_EMAIL");
    }


    public SalesTeamDao(DaoConfig config) {
        super(config);
    }
    
    public SalesTeamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALES_TEAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: salesID
                "\"SALES_PERSON\" TEXT," + // 1: salesPerson
                "\"SALES_PERSON_TEL\" TEXT," + // 2: salesPersonTel
                "\"SALES_BRANCH\" TEXT," + // 3: salesBranch
                "\"SALES_CONTACT\" TEXT," + // 4: salesContact
                "\"SALES_EMAIL\" TEXT);"); // 5: salesEmail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALES_TEAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SalesTeam entity) {
        stmt.clearBindings();
 
        Long salesID = entity.getSalesID();
        if (salesID != null) {
            stmt.bindLong(1, salesID);
        }
 
        String salesPerson = entity.getSalesPerson();
        if (salesPerson != null) {
            stmt.bindString(2, salesPerson);
        }
 
        String salesPersonTel = entity.getSalesPersonTel();
        if (salesPersonTel != null) {
            stmt.bindString(3, salesPersonTel);
        }
 
        String salesBranch = entity.getSalesBranch();
        if (salesBranch != null) {
            stmt.bindString(4, salesBranch);
        }
 
        String salesContact = entity.getSalesContact();
        if (salesContact != null) {
            stmt.bindString(5, salesContact);
        }
 
        String salesEmail = entity.getSalesEmail();
        if (salesEmail != null) {
            stmt.bindString(6, salesEmail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SalesTeam entity) {
        stmt.clearBindings();
 
        Long salesID = entity.getSalesID();
        if (salesID != null) {
            stmt.bindLong(1, salesID);
        }
 
        String salesPerson = entity.getSalesPerson();
        if (salesPerson != null) {
            stmt.bindString(2, salesPerson);
        }
 
        String salesPersonTel = entity.getSalesPersonTel();
        if (salesPersonTel != null) {
            stmt.bindString(3, salesPersonTel);
        }
 
        String salesBranch = entity.getSalesBranch();
        if (salesBranch != null) {
            stmt.bindString(4, salesBranch);
        }
 
        String salesContact = entity.getSalesContact();
        if (salesContact != null) {
            stmt.bindString(5, salesContact);
        }
 
        String salesEmail = entity.getSalesEmail();
        if (salesEmail != null) {
            stmt.bindString(6, salesEmail);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SalesTeam readEntity(Cursor cursor, int offset) {
        SalesTeam entity = new SalesTeam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // salesID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // salesPerson
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // salesPersonTel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // salesBranch
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // salesContact
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // salesEmail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SalesTeam entity, int offset) {
        entity.setSalesID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSalesPerson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSalesPersonTel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSalesBranch(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSalesContact(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSalesEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SalesTeam entity, long rowId) {
        entity.setSalesID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SalesTeam entity) {
        if(entity != null) {
            return entity.getSalesID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SalesTeam entity) {
        return entity.getSalesID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
