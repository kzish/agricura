package daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.centricdata.agricura.Models.Branches;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRANCHES".
*/
public class BranchesDao extends AbstractDao<Branches, Long> {

    public static final String TABLENAME = "BRANCHES";

    /**
     * Properties of entity Branches.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BranchID = new Property(0, Long.class, "branchID", true, "_id");
        public final static Property BranchName = new Property(1, String.class, "branchName", false, "BRANCH_NAME");
        public final static Property BranchAddress = new Property(2, String.class, "branchAddress", false, "BRANCH_ADDRESS");
        public final static Property BranchTelephone = new Property(3, String.class, "branchTelephone", false, "BRANCH_TELEPHONE");
        public final static Property BranchContact = new Property(4, String.class, "branchContact", false, "BRANCH_CONTACT");
    }


    public BranchesDao(DaoConfig config) {
        super(config);
    }
    
    public BranchesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRANCHES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: branchID
                "\"BRANCH_NAME\" TEXT," + // 1: branchName
                "\"BRANCH_ADDRESS\" TEXT," + // 2: branchAddress
                "\"BRANCH_TELEPHONE\" TEXT," + // 3: branchTelephone
                "\"BRANCH_CONTACT\" TEXT);"); // 4: branchContact
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRANCHES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Branches entity) {
        stmt.clearBindings();
 
        Long branchID = entity.getBranchID();
        if (branchID != null) {
            stmt.bindLong(1, branchID);
        }
 
        String branchName = entity.getBranchName();
        if (branchName != null) {
            stmt.bindString(2, branchName);
        }
 
        String branchAddress = entity.getBranchAddress();
        if (branchAddress != null) {
            stmt.bindString(3, branchAddress);
        }
 
        String branchTelephone = entity.getBranchTelephone();
        if (branchTelephone != null) {
            stmt.bindString(4, branchTelephone);
        }
 
        String branchContact = entity.getBranchContact();
        if (branchContact != null) {
            stmt.bindString(5, branchContact);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Branches entity) {
        stmt.clearBindings();
 
        Long branchID = entity.getBranchID();
        if (branchID != null) {
            stmt.bindLong(1, branchID);
        }
 
        String branchName = entity.getBranchName();
        if (branchName != null) {
            stmt.bindString(2, branchName);
        }
 
        String branchAddress = entity.getBranchAddress();
        if (branchAddress != null) {
            stmt.bindString(3, branchAddress);
        }
 
        String branchTelephone = entity.getBranchTelephone();
        if (branchTelephone != null) {
            stmt.bindString(4, branchTelephone);
        }
 
        String branchContact = entity.getBranchContact();
        if (branchContact != null) {
            stmt.bindString(5, branchContact);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Branches readEntity(Cursor cursor, int offset) {
        Branches entity = new Branches( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // branchID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // branchName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // branchAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branchTelephone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // branchContact
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Branches entity, int offset) {
        entity.setBranchID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranchName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranchAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranchTelephone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchContact(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Branches entity, long rowId) {
        entity.setBranchID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Branches entity) {
        if(entity != null) {
            return entity.getBranchID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Branches entity) {
        return entity.getBranchID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
